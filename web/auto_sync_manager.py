#!/usr/bin/env python
"""
Sistema de Sincronizaci√≥n Autom√°tica de Turnos
Sincroniza todos los usuarios autom√°ticamente cada hora
"""

import threading
import time
import logging
import traceback
import requests
from datetime import datetime, timedelta
from typing import List, Dict, Tuple, Optional
import signal
import sys
import os

# Importar m√≥dulos de la aplicaci√≥n
from database import get_db_connection, execute_query, close_db_connection
from models.credencial_sita import CredencialSita
from routes.sincronizacion_routes import obtener_turnos_sita, insertar_turnos_en_bd

# Configurar logging espec√≠fico para el sincronizador
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("auto_sync.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("AutoSyncTurnos")

class AutoSyncManager:
    """Gestor de sincronizaci√≥n autom√°tica de turnos"""
    
    def __init__(self):
        self.running = False
        self.thread = None
        self.stats = {
            'cycle_count': 0,
            'total_users_synced': 0,
            'total_errors': 0,
            'last_cycle_start': None,
            'last_cycle_end': None,
            'current_user': None
        }
        
    def start(self):
        """Inicia el proceso de sincronizaci√≥n autom√°tica"""
        if self.running:
            logger.warning("El sincronizador autom√°tico ya est√° en ejecuci√≥n")
            return
            
        self.running = True
        self.thread = threading.Thread(target=self._sync_loop, daemon=True)
        self.thread.start()
        logger.info("üöÄ Sincronizador autom√°tico iniciado")
        
    def stop(self):
        """Detiene el proceso de sincronizaci√≥n autom√°tica"""
        if not self.running:
            return
            
        self.running = False
        if self.thread and self.thread.is_alive():
            logger.info("‚èπÔ∏è Deteniendo sincronizador autom√°tico...")
            self.thread.join(timeout=30)
        logger.info("‚úÖ Sincronizador autom√°tico detenido")
        
    def get_stats(self) -> Dict:
        """Obtiene estad√≠sticas del sincronizador"""
        return self.stats.copy()
        
    def _sync_loop(self):
        """Bucle principal de sincronizaci√≥n"""
        logger.info("üîÑ Iniciando bucle de sincronizaci√≥n autom√°tica")
        
        while self.running:
            try:
                cycle_start = datetime.now()
                self.stats['cycle_count'] += 1
                self.stats['last_cycle_start'] = cycle_start
                
                logger.info(f"üìÖ Iniciando ciclo de sincronizaci√≥n #{self.stats['cycle_count']}")
                
                # Obtener usuarios activos con credenciales SITA
                users = self._get_active_users_with_credentials()
                
                if not users:
                    logger.warning("‚ö†Ô∏è No se encontraron usuarios activos con credenciales SITA")
                else:
                    logger.info(f"üë• Sincronizando {len(users)} usuarios")
                    
                    # Sincronizar cada usuario secuencialmente
                    for user in users:
                        if not self.running:  # Verificar si se debe detener
                            break
                            
                        self.stats['current_user'] = f"{user['nombre_completo']} ({user['numero_empleado']})"
                        success = self._sync_user_with_retries(user)
                        
                        if success:
                            self.stats['total_users_synced'] += 1
                        else:
                            self.stats['total_errors'] += 1
                            
                        # Peque√±a pausa entre usuarios para no sobrecargar
                        if self.running:
                            time.sleep(5)
                
                self.stats['last_cycle_end'] = datetime.now()
                self.stats['current_user'] = None
                
                cycle_duration = (self.stats['last_cycle_end'] - cycle_start).total_seconds()
                logger.info(f"‚úÖ Ciclo #{self.stats['cycle_count']} completado en {cycle_duration:.1f}s")
                
                # Esperar 1 hora antes del siguiente ciclo
                if self.running:
                    logger.info("‚è∞ Esperando 1 hora hasta el pr√≥ximo ciclo...")
                    self._wait_with_interruption(3600)  # 1 hora = 3600 segundos
                    
            except Exception as e:
                logger.error(f"‚ùå Error cr√≠tico en el bucle de sincronizaci√≥n: {e}")
                logger.error(traceback.format_exc())
                self.stats['total_errors'] += 1
                
                # Esperar un poco antes de reintentar
                if self.running:
                    logger.info("‚è≥ Esperando 5 minutos antes de reintentar...")
                    self._wait_with_interruption(300)  # 5 minutos
                    
        logger.info("üèÅ Bucle de sincronizaci√≥n terminado")
        
    def _wait_with_interruption(self, seconds: int):
        """Espera con capacidad de interrupci√≥n"""
        start_time = time.time()
        while self.running and (time.time() - start_time) < seconds:
            time.sleep(1)
            
    def _get_active_users_with_credentials(self) -> List[Dict]:
        """Obtiene usuarios activos que tienen credenciales SITA configuradas"""
        try:
            query = """
                SELECT e.id, e.numero_empleado, e.nombre_completo, e.email,
                       c.sita_username, c.site_id, c.cvation_tenantid, c.roster_url
                FROM empleados e
                INNER JOIN credenciales_sita c ON e.id = c.empleado_id
                WHERE e.activo = 1
                ORDER BY e.id
            """
            
            users = execute_query(query)
            logger.info(f"üìä Encontrados {len(users)} usuarios activos con credenciales SITA")
            return users
            
        except Exception as e:
            logger.error(f"‚ùå Error obteniendo usuarios: {e}")
            return []
            
    def _sync_user_with_retries(self, user: Dict) -> bool:
        """Sincroniza un usuario con l√≥gica de reintentos para timeouts"""
        user_id = user['id']
        user_name = f"{user['nombre_completo']} ({user['numero_empleado']})"
        
        max_retries = 5
        retry_delay = 30  # 30 segundos entre reintentos
        
        for attempt in range(1, max_retries + 1):
            if not self.running:
                return False
                
            try:
                logger.info(f"üîÑ [{attempt}/{max_retries}] Sincronizando: {user_name}")
                
                # Obtener credenciales completas del usuario
                credenciales = CredencialSita.obtener_por_empleado(user_id)
                if not credenciales:
                    logger.error(f"‚ùå No se encontraron credenciales para {user_name}")
                    return False
                
                # Marcar sincronizaci√≥n en progreso
                self._set_sync_status(user_id, True, None)
                
                # Realizar sincronizaci√≥n
                turnos = obtener_turnos_sita(credenciales)
                if turnos:
                    updated_days = insertar_turnos_en_bd(user_id, turnos)
                    logger.info(f"‚úÖ {user_name}: {updated_days} d√≠as actualizados")
                else:
                    logger.warning(f"‚ö†Ô∏è {user_name}: No se encontraron turnos")
                
                # Marcar sincronizaci√≥n completada
                self._set_sync_status(user_id, False, None)
                return True
                
            except requests.exceptions.ReadTimeout as e:
                error_msg = f"Timeout de lectura (intento {attempt}/{max_retries})"
                logger.warning(f"‚è∞ {user_name}: {error_msg}")
                
                if attempt < max_retries:
                    logger.info(f"‚è≥ Esperando {retry_delay}s antes del siguiente intento...")
                    self._wait_with_interruption(retry_delay)
                else:
                    logger.error(f"‚ùå {user_name}: M√°ximo de reintentos alcanzado por timeout")
                    self._set_sync_status(user_id, False, "Timeout despu√©s de 5 intentos")
                    
            except requests.exceptions.ConnectTimeout as e:
                error_msg = f"Timeout de conexi√≥n (intento {attempt}/{max_retries})"
                logger.warning(f"‚è∞ {user_name}: {error_msg}")
                
                if attempt < max_retries:
                    logger.info(f"‚è≥ Esperando {retry_delay}s antes del siguiente intento...")
                    self._wait_with_interruption(retry_delay)
                else:
                    logger.error(f"‚ùå {user_name}: M√°ximo de reintentos alcanzado por timeout de conexi√≥n")
                    self._set_sync_status(user_id, False, "Timeout de conexi√≥n despu√©s de 5 intentos")
                    
            except requests.exceptions.ConnectionError as e:
                logger.error(f"‚ùå {user_name}: Error de conexi√≥n: {e}")
                self._set_sync_status(user_id, False, f"Error de conexi√≥n: {str(e)[:200]}")
                break  # No reintentar errores de conexi√≥n
                
            except Exception as e:
                logger.error(f"‚ùå {user_name}: Error inesperado: {e}")
                logger.error(traceback.format_exc())
                self._set_sync_status(user_id, False, f"Error: {str(e)[:200]}")
                break  # No reintentar otros errores
                
        return False
        
    def _set_sync_status(self, user_id: int, in_progress: bool, error_msg: Optional[str]):
        """Actualiza el estado de sincronizaci√≥n del usuario"""
        try:
            if in_progress:
                query = """
                    UPDATE empleados
                    SET sincronizacion_en_progreso = 1,
                        ultimo_error_sincronizacion = NULL
                    WHERE id = %s
                """
                execute_query(query, (user_id,), commit=True)
            else:
                query = """
                    UPDATE empleados
                    SET sincronizacion_en_progreso = 0,
                        ultima_sincronizacion = NOW(),
                        ultimo_error_sincronizacion = %s
                    WHERE id = %s
                """
                execute_query(query, (error_msg, user_id), commit=True)
                
        except Exception as e:
            logger.error(f"‚ùå Error actualizando estado de sincronizaci√≥n: {e}")


# Instancia global del gestor
auto_sync_manager = AutoSyncManager()

def start_auto_sync():
    """Funci√≥n para iniciar la sincronizaci√≥n autom√°tica"""
    auto_sync_manager.start()

def stop_auto_sync():
    """Funci√≥n para detener la sincronizaci√≥n autom√°tica"""
    auto_sync_manager.stop()

def get_auto_sync_stats():
    """Funci√≥n para obtener estad√≠sticas"""
    return auto_sync_manager.get_stats()

def signal_handler(signum, frame):
    """Manejador de se√±ales para parada limpia"""
    logger.info("üõë Se√±al de parada recibida")
    stop_auto_sync()
    sys.exit(0)

if __name__ == "__main__":
    # Registrar manejadores de se√±ales
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    logger.info("üöÄ Iniciando sistema de sincronizaci√≥n autom√°tica")
    
    try:
        start_auto_sync()
        
        # Mantener el proceso principal vivo
        while True:
            time.sleep(60)  # Verificar cada minuto
            stats = get_auto_sync_stats()
            if stats['cycle_count'] > 0:
                logger.info(f"üìä Stats: Ciclos: {stats['cycle_count']}, "
                          f"Usuarios: {stats['total_users_synced']}, "
                          f"Errores: {stats['total_errors']}")
                          
    except KeyboardInterrupt:
        logger.info("üëã Deteniendo por interrupci√≥n del usuario")
    finally:
        stop_auto_sync()